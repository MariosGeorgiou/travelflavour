"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _ActiveButton = _interopRequireDefault(require("./ActiveButton"));

var _PageButtonLink = _interopRequireDefault(require("./PageButtonLink"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var Pages = function Pages(_ref) {
  var pageCount = _ref.pageCount,
      selectedPage = _ref.selectedPage,
      onPageChange = _ref.onPageChange,
      _ref$enlargement = _ref.enlargement,
      enlargement = _ref$enlargement === void 0 ? 1 : _ref$enlargement,
      size = _ref.size;
  return Array.apply(void 0, _toConsumableArray(Array(pageCount))).map(function (_, index) {
    var key = index + enlargement;
    return selectedPage === key ? React.createElement(_ActiveButton.default, {
      key: key,
      size: size
    }, key) : React.createElement(_PageButtonLink.default, {
      key: key,
      onPageChange: onPageChange,
      size: size
    }, key);
  });
};

var _default = Pages;
exports.default = _default;