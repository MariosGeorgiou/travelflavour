import React, { useEffect } from "react";
import styled from "styled-components";
import { rtlSpacing } from "../../utils/rtl";
import defaultTheme from "../../defaultTheme";
import { StyledTag } from "../../Tag";
const StyledInputTags = styled.div.withConfig({
  displayName: "InputTags__StyledInputTags",
  componentId: "sc-92v3p1-0"
})(["position:relative;margin:", ";display:flex;align-items:center;flex:0 1 auto;height:100%;z-index:2;min-width:50px;overflow:hidden;"], ({
  theme
}) => rtlSpacing(`0 0 0 ${theme.orbit.spaceSmall}`));
StyledInputTags.defaultProps = {
  theme: defaultTheme
};
const StyledInputTagsInner = styled.div.withConfig({
  displayName: "InputTags__StyledInputTagsInner",
  componentId: "sc-92v3p1-1"
})(["overflow-x:scroll;white-space:nowrap;-ms-overflow-style:none;scrollbar-width:none;&::-webkit-scrollbar{display:none;}", " + ", "{margin:", ";}"], StyledTag, StyledTag, ({
  theme
}) => rtlSpacing(`0 0 0 ${theme.orbit.spaceXSmall}`));
StyledInputTagsInner.defaultProps = {
  theme: defaultTheme
};

const InputTags = ({
  children
}) => {
  const tagsRef = React.createRef();
  useEffect(() => {
    const handleMouseMove = event => {
      if (tagsRef && tagsRef.current) {
        const {
          isDragging
        } = tagsRef.current;

        if (isDragging && event.movementX) {
          tagsRef.current.scrollLeft -= event.movementX;
        }
      }
    };

    const handleMouseUp = () => {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = false;
      }
    };

    if (tagsRef && tagsRef.current) {
      tagsRef.current.addEventListener("mousemove", handleMouseMove);
      tagsRef.current.addEventListener("mouseup", handleMouseUp);
    }

    return () => {
      const tagsNode = tagsRef.current;

      if (tagsNode) {
        tagsNode.removeEventListener("mousemove", handleMouseMove);
        tagsNode.removeEventListener("mouseup", handleMouseUp);
      }
    };
  }, [tagsRef]);
  return React.createElement(StyledInputTags, null, React.createElement(StyledInputTagsInner, {
    ref: tagsRef,
    onMouseDown: () => {
      if (tagsRef && tagsRef.current) {
        tagsRef.current.isDragging = true;
      }
    }
  }, children));
};

export default InputTags;